on:
  push:
    # branches:
    #   - master

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v2.3.1
        with:
          path: arduino-apollo3
          fetch-depth: 0
      # - name: init submodules
      #   run: |
      #     cd arduino-apollo3
      #     git submodule update --init --recursive
      - name: build variant libs
        id: buildvariants
        uses: oclyke-actions/compile-mbed-projects@v0.0.0
        with:
          jobs: |
            [
              {"name": "artemis-dev-kit-lib", "config": {"base": "compile --library --source=mbed-os", "tgt": "SFE_ARTEMIS_DK", "tool": "GCC_ARM"}, "user": {"variant": {"name": "ARTEMIS_DEV_KIT", "loc": "variants/SFE_ARTEMIS_DK"}}},
              {"name": "artemis-redboard-atp-lib", "config": {"base": "compile --library --source=mbed-os", "tgt": "SFE_ARTEMIS_ATP", "tool": "GCC_ARM"}, "user": {"variant": {"name": "ARTEMIS_ATP", "loc": "variants/SFE_ARTEMIS_ATP"}}}
            ]
          mbed: |
            {"url": "https://github.com/sparkfun/mbed-os-ambiq-apollo3", "branch": "ambiq-apollo3-dev"}
      - name: check out new staging branch
        run: |
          cd arduino-apollo3
          git branch -c staging
          cd ${GITHUB_WORKSPACE}
      - name: copy libs to variants
        run: |
          ls -la arduino-apollo3


          jobs='${{ steps.buildvariants.outputs.jobs }}'
          job_count=0

          for row in $(echo ${jobs} | jq -r '.[] | @base64'); do
            # echo ${row} | base64 --decode
            name="$(echo ${row} | base64 --decode | jq -r '.name')"
            loc="$(echo ${row} | base64 --decode | jq -r '.loc')"
            config="$(echo ${row} | base64 --decode | jq -r '.config')"
            user="$(echo ${row} | base64 --decode | jq -r '.user')"

            tgt="$(echo ${config} | jq -r -c '.tgt')"
            tool="$(echo ${config} | jq -r -c '.tool')"

            echo ""
            echo "${job_count}:"
            echo "'${name}'"
            
            echo "loc: '${loc}'"
            echo "config: '${config}'"
            echo "user: '${user}'"

            lib_src="./${loc}/BUILD/libraries/libmbed-os/${tgt}/${tool}/libmbed-os.a"
            lib_dest="./arduino-apollo3/$(echo ${user} | jq -r '.variant.loc')/mbed/libmbed-os.a"
            echo "copying '${lib_src}' to '${lib_dest}'"
            echo "contents of src file: $(cat $lib_src)"
            mkdir -p $(dirname $lib_dest)
            cp $lib_src $lib_dest
            echo "contents of dest file: $(cat $lib_dest)"

            cd arduino-apollo3
            git add ${lib_dest}
            cd ${GITHUB_WORKSPACE}

            job_count="$((job_count + 1))"
          done

          cd arduino-apollo3
          git commit -a -m "generated mbed libs"
          cd ${GITHUB_WORKSPACE}

      # - name: changelog
      #   id: changelog
      #   uses: scottbrenner/generate-changelog-action@1.0.0
      #   env:
      #     REPO: ${{ github.repository }}
      - name: merge staging branch into master
        run: |
          git checkout master
          git merge staging
          git push
      - name: create release
        id: create_release
        # run: echo "placeholder for release creation ${{steps.changelog.outputs.changelog}}"
        run: echo "placeholder for release creation ${{steps.changelog.outputs.changelog}}"
        # uses: actions/create-release@latest
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # with:
        #   tag_name: ${{ github.ref }}
        #   release_name: Release ${{ github.ref }}
        #   body: |
        #     ${{ steps.changelog.outputs.changelog }}
        #   draft: false
        #   prerelease: false
