on:
  push:
    # branches:
    #   - master

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v1 # currently only v1 supports submodules
        # with:
        #   # submodules: recursive
        #   # fetch-depth: 0
      - name: build variant libs
        id: buildvariants
        uses: oclyke-actions/compile-mbed-projects@v0.0.0
        with:
          jobs: |
            [
              {"name": "artemis-dev-kit-lib", "cmd": "compile -m SFE_ARTEMIS_DK -t GCC_ARM --library --source=mbed-os", "args": {"variant": {"name": "ARTEMIS_DEV_KIT", "loc": "variants/SFE_ARTEMIS_DK"}}},
              {"name": "artemis-redboard-atp-lib", "cmd": "compile -m SFE_ARTEMIS_ATP -t GCC_ARM --library --source=mbed-os", "args": {"variant": {"name": "ARTEMIS_ATP", "loc": "variants/SFE_ARTEMIS_ATP"}}}
            ]
          mbed: |
            {"url": "https://github.com/sparkfun/mbed-os-ambiq-apollo3", "branch": "ambiq-apollo3-dev"}
      - name: copy libs to variants
        run: |
          jobs='${{ steps.buildvariants.outputs.jobs }}'
          echo ${jobs} | jq '.'
          job_count=0
          for row in "$(echo ${jobs} | jq -r '.[] | @base64')"; do

            echo ${row} | base64 --decode

            # name="$(echo ${row} | base64 --decode | jq -r '.name')"
            # loc="$(echo ${row} | base64 --decode | jq -r '.loc')"
            # cmd="$(echo ${row} | base64 --decode | jq -r '.cmd')"
            # args="$(echo ${row} | base64 --decode | jq -r '.args')"

            # "$(echo "")"
            # "$(echo "${job_count}:")"
            # "$(echo "\tname: '${name}'")"
            # "$(echo "\tloc: '${loc}'")"
            # "$(echo "\tcmd: '${cmd}'")"
            # "$(echo "\targs: '${args}'")"

            # job_count="$((job_count + 1))"
          done
      # - name: changelog
      #   id: changelog
      #   uses: scottbrenner/generate-changelog-action@1.0.0
      #   env:
      #     REPO: ${{ github.repository }}
      - name: create release
        id: create_release
        # run: echo "placeholder for release creation ${{steps.changelog.outputs.changelog}}"
        run: echo "placeholder for release creation ${{steps.changelog.outputs.changelog}}"
        # uses: actions/create-release@latest
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # with:
        #   tag_name: ${{ github.ref }}
        #   release_name: Release ${{ github.ref }}
        #   body: |
        #     ${{ steps.changelog.outputs.changelog }}
        #   draft: false
        #   prerelease: false
